//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('all', auth() == user)
/// @@allow('all', auth().roles?[name == 'admin'])
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('all', auth() == this)
model User {
  id               String    @id() @default(uuid())
  name             String?
  email            String?   @unique()
  stripeCustomerId String?
  emailVerified    DateTime?
  /// @password
  /// @omit
  password         String?
  image            String?
  dateCreated      DateTime  @default(now())
  dateDeleted      DateTime?
  dateUpdated      DateTime  @default(now()) @updatedAt()
  accounts         Account[]
  sessions         Session[]
  roles            Role[]
}

/// @@allow('all', auth() == user)
/// @@allow('all', auth().roles?[name == 'admin'])
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', auth().roles?[name == 'admin'])
model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}
